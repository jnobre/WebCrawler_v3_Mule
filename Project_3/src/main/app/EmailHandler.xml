<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/2.4/mule-twitter.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd">

 <mulexml:jaxb-context name="JaxbRef" packageNames="movies" doc:name="JAXB Context"/>
 <mulexml:jaxb-xml-to-object-transformer  name="XML_to_Movie" jaxbContext-ref="JaxbRef" doc:name="XML to Movie" 
 returnClass="movies.MovieCatalog"/>
    
	<smtp:gmail-connector name="emailConnector" doc:name="Gmail"/>

    <jdbc-ee:postgresql-data-source name="PostgreSQL_Data_Source" user="postgres" password="postgres" url="jdbc:postgresql://localhost:5432/imdbspy" transactionIsolation="UNSPECIFIED" doc:name="PostgreSQL Data Source"/>
    <jdbc-ee:connector name="PostgreSQL_JDBC_Connector" dataSource-ref="PostgreSQL_Data_Source" validateConnections="true" queryTimeout="-1" pollingFrequency="0" doc:name="Database"/>
    <twitter:config name="Twitter" accessKey="2221791494-A9wlCIiwa7abWHq7z333Wtxg03tU32o3OpTXVH2" accessSecret="kIrUKW7PmmoXBzJDyIdyTpKyUKrDyHmjOB9ODyQcIDvRJ" consumerKey="BdYK80VPKJCEy6Yj3X4IA" consumerSecret="SKQt1PmiFlzltYBbZ5gALt8vFC0tAtAYZ6GfBQExD2E" doc:name="Twitter">
        <twitter:connection-pooling-profile initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_GROW"/>
    </twitter:config>
    <flow name="EmailHandler" doc:name="EmailHandler">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="subscribe" doc:name="/subscribe"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties['choice'] == 'unsubscribe']">
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="VerifyEmailExistance" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="VerifyEmailExistance">
                    <jdbc-ee:query key="VerifyEmailExistance" value="Select * From email_table Where email = #[message.inboundProperties['email']];"/>
                </jdbc-ee:outbound-endpoint>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <choice doc:name="Choice">
                    <when expression="#[message.payload!='[]']">
                        <set-variable variableName="emailaddress" value="#[string:#[message.inboundProperties['email'].replace(&quot;%40&quot;,&quot;@&quot;)]]" doc:name="Variable"/>
                        <expression-transformer expression="#[string: Please go to: http://localhost:8081/remove?email=#[message.inboundProperties['email']]&amp;digest=#[Boolean.parseBoolean(message.inboundProperties['digest'])]&amp;subscription_method=web to confirm your request.]" doc:name="Email Body"/>
                        <smtp:outbound-endpoint 
                        host="smtp.gmail.com" 
                        port="587" 
                        user="ucfdesk%40gmail.com" 
                        password="jomami123" 
                        to="#[emailaddress]" 
                        from="ucfdesk@gmail.com" 
                        subject="Confirmation" 
                        responseTimeout="10000" 
                        connector-ref="emailConnector" 
                        doc:name="SMTP"/>
                        <expression-transformer expression="#[string: Confirmation email sent.]" doc:name="Success"/>
                    </when>
                    <otherwise>
                        <expression-transformer expression="#[string: Email doesnt exists.]" doc:name="End"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <wildcard-filter pattern="*?email=*&amp;digest=*" caseSensitive="true" doc:name="Filter for email and digest"/>
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryTimeout="-1" doc:name="Verify Email Existance" connector-ref="PostgreSQL_JDBC_Connector" queryKey="VerifyEmailExistance">
                    <jdbc-ee:query key="VerifyEmailExistance" value="Select * From email_table Where email = #[message.inboundProperties['email']];"/>
                </jdbc-ee:outbound-endpoint>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <choice doc:name="Choice">
                    <when expression="#[message.payload == '[]']">
                        <set-variable variableName="emailaddress" value="#[string:#[message.inboundProperties['email'].replace(&quot;%40&quot;,&quot;@&quot;)]]" doc:name="Email"/>
                        <expression-transformer expression="#[string: Please go to: http://localhost:8081/confirm?email=#[message.inboundProperties['email']]&amp;digest=#[Boolean.parseBoolean(message.inboundProperties['digest'])]&amp;subscription_method=web to confirm your request.]" doc:name="Email Body"/>
                        <smtp:outbound-endpoint 
                        host="smtp.gmail.com" 
                        port="587" 
                        user="ucfdesk%40gmail.com" 
                        password="jomami123" 
                        to="#[emailaddress]" 
                        from="ucfdesk@gmail.com" 
                        subject="Confirmation" 
                        responseTimeout="10000" 
                        doc:name="SMTP" 
                        connector-ref="emailConnector"/>
                        <expression-transformer expression="#[string: Confirmation email sent.]" doc:name="Success"/>
                    </when>
                    <otherwise>
                        <expression-transformer expression="#[string: Email already exists.]" doc:name="End"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
    </flow>
    <flow name="EmailHandlerFlow4" doc:name="EmailHandlerFlow4">
        <http:inbound-endpoint exchange-pattern="request-response"    doc:name="HTTP" host="localhost" path="subscribeUser" port="8081"/>
        <cxf:jaxws-service doc:name="SOAP"  serviceClass="soapservice.SubscribeUser"/>
        <component class="soapservice.SubscribeUserImpl" doc:name="Java"/>
        <set-variable variableName="email" value="#[xpath://user/mail/text()]" doc:name="Email"/>
        <set-variable variableName="emailaddress" value="#[string:#[#[flowVars['email'].replace(&quot;%40&quot;,&quot;@&quot;)]]]" doc:name="EmailAddress"/>
        <set-variable variableName="digestType" value="#[xpath://user/type/text()]" doc:name="Subscription type"/>
        <set-variable variableName="actionType" value="#[xpath://user/action/text()]" doc:name="Action"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars['actionType']=='unsubscribe']">
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryTimeout="-1" doc:name="Verify Email Existance" queryKey="VerifyEmailExistance" connector-ref="PostgreSQL_JDBC_Connector">
                    <jdbc-ee:query key="VerifyEmailExistance" value="Select * From email_table Where email =  #[flowVars['email']];"/>
                </jdbc-ee:outbound-endpoint>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <choice doc:name="Choice">
                    <when expression="#[message.payload!='[]']">
                        <expression-transformer expression="#[string: Please go to: http://localhost:8081/remove?email=#[flowVars['email']]&amp;digest=#[Boolean.parseBoolean(flowVars['digestType'])]&amp;subscription_method=soap to confirm your request.]" doc:name="Email Body"/>
                        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="ucfdesk%40gmail.com" password="jomami123" to="#[emailaddress]" from="ucfdesk@gmail.com" subject="Confirmation" responseTimeout="10000" connector-ref="emailConnector" doc:name="SMTP"/>
                        <expression-transformer expression="#[string: Confirmation email sent.]" doc:name="Success"/>
                    </when>
                    <otherwise>
                        <expression-transformer expression="#[string: Email doesnt exists.]" doc:name="End"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="VerifyEmailExistance" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Verify Email Existance">
                    <jdbc-ee:query key="VerifyEmailExistance" value="Select * From email_table Where email =  #[flowVars['email']];"/>
                </jdbc-ee:outbound-endpoint>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <choice doc:name="Choice">
                    <when expression="#[message.payload=='[]']">
                        <expression-transformer expression="#[string: Please go to: http://localhost:8081/confirm?email=#[flowVars['email']]&amp;digest=#[Boolean.parseBoolean(flowVars['digestType'])]&amp;subscription_method=soap to confirm your request.]" doc:name="Email Body"/>
                        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="ucfdesk%40gmail.com" password="jomami123" to="#[emailaddress]" from="ucfdesk@gmail.com" subject="Confirmation" responseTimeout="10000" connector-ref="emailConnector" doc:name="SMTP"/>
                        <expression-transformer expression="#[string: Confirmation email sent.]" doc:name="Success"/>
                    </when>
                    <otherwise>
                        <expression-transformer expression="#[string: Email already exists.]" doc:name="End"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
    </flow>
    <flow name="EmailHandlerFlow1" doc:name="EmailHandlerFlow1">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="confirm" doc:name="/confirm"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="one-way" queryKey="Subscribe" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Susbcribe">
            <jdbc-ee:query key="Subscribe" value="Insert Into &quot;email_table&quot; Values(#[message.inboundProperties['email']], #[Boolean.parseBoolean(message.inboundProperties['digest'])],#[message.inboundProperties['subscription_method']]);"/>
        </jdbc-ee:outbound-endpoint>
        <expression-transformer expression="#[string: Success!]" doc:name="Success"/>
    </flow>
    <flow name="EmailHandlerFlow2" doc:name="EmailHandlerFlow2">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="remove" doc:name="/remove"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="one-way" queryKey="Unsubscribe" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Unsubscribe">
            <jdbc-ee:query key="Unsubscribe" value="Delete from email_table where email = #[message.inboundProperties['email']];"/>
        </jdbc-ee:outbound-endpoint>
        <expression-transformer expression="#[string: Unsubscribed.]" doc:name="Success"/>
    </flow>
    <flow name="EmailHandlerFlow8" doc:name="EmailHandlerFlow8">
        <quartz:inbound-endpoint jobName="TimeDigest" cronExpression="0/20 * * * * ?" repeatInterval="0" responseTimeout="10000" doc:name="Quartz">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="isEmpty" value="#['TRUE']" doc:name="isEmpty = true"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="GetMoviesToSend" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="GetMoviesToSend">
            <jdbc-ee:query key="GetMoviesToSend" value="Select name from &quot;movie_table_2&quot; where was_sent = FALSE;"/>
        </jdbc-ee:outbound-endpoint>
        <set-variable variableName="toSend" value="#['Movies Added: \n']" doc:name="to Send"/>
        <foreach collection="#[message.payload]" doc:name="For Each">
            <set-variable variableName="isEmpty" value="#['FALSE']" doc:name="isEmpty = false"/>
            <set-variable variableName="toSend" value="#[toSend + message.payload.name + '\n']" doc:name="concat to toSend"/>
            <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="UpdateSentMovies" queryTimeout="-1" doc:name="Set movies as sent" connector-ref="PostgreSQL_JDBC_Connector">
                <jdbc-ee:query key="UpdateSentMovies" value="UPDATE &quot;movie_table_2&quot; SET &quot;was_sent&quot; = TRUE WHERE &quot;name&quot; = #[message.payload.name];"/>
            </jdbc-ee:outbound-endpoint>
        </foreach>
        <choice doc:name="Choice">
            <when expression="#[isEmpty=='FALSE']">
                <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="GetDigestUsers" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Get digest users">
                    <jdbc-ee:query key="GetDigestUsers" value="Select email from &quot;email_table&quot; where is_digest = TRUE;"/>
                </jdbc-ee:outbound-endpoint>
                <foreach collection="#[message.payload]" doc:name="For Each">
                    <set-variable variableName="email" value="#[string:#[#[message.payload.email.replace(&quot;%40&quot;,&quot;@&quot;)]]]" doc:name="Email"/>
                    <set-payload value="#[toSend]" doc:name="email body"/>
                    <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="ucfdesk%40gmail.com" password="jomami123" to="#[email]" from="ucfdesk@gmail.com" subject="Digest Email" responseTimeout="10000" connector-ref="emailConnector" doc:name="SMTP"/>
                    <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="UpdateStatistics" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Update statistics">
                        <jdbc-ee:query key="UpdateStatistics" value="UPDATE &quot;statistics&quot; SET &quot;counter&quot; = &quot;counter&quot; + 1 WHERE &quot;statistics_name&quot; = 'digest_sent';"/>
                    </jdbc-ee:outbound-endpoint>
                </foreach>
            </when>
            <otherwise>
                <logger message="Nothing to Send!" level="INFO" doc:name="Nothing to send"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="EmailHandlerFlow3" doc:name="EmailHandlerFlow3">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="addMovie" doc:name="HTTP"/>
        <cxf:jaxws-service doc:name="SOAP" serviceClass="soapservice.AddMovie"/>
        <component class="soapservice.AddMovieImpl" doc:name="Java"/>
        <transformer ref="XML_to_Movie" doc:name="XML to Movie"/>
        <flow-ref name="EmailHandlerFlow5" doc:name="Add Movie"/>
        <set-payload value="Success!!!!" doc:name="Success"/>
    </flow>
    <flow name="Statistics" doc:name="Statistics">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="getStatistics" doc:name="/getStatistics"/>
        <cxf:jaxws-service serviceClass="soapservice.GetStatistics" doc:name="SOAP"/>
        <component class="soapservice.GetStatisticsImpl" doc:name="Java"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="CountMovies" queryKey="CountMovies">
            <jdbc-ee:query key="CountMovies" value="Select Count(*) from &quot;movie_table_2&quot;;"/>
        </jdbc-ee:outbound-endpoint>
        <set-variable variableName="statistics" value="#['Number of processed movies: ' + payload[0]['count'] + '\n------------------------------\nNumber of movies processed for each category: ']" doc:name="statistics"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="GetGenres" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="GenreCount">
            <jdbc-ee:query key="GetGenres" value="Select &quot;Genre&quot;, &quot;Counter&quot; from &quot;genre_counter&quot;;"/>
        </jdbc-ee:outbound-endpoint>
        <foreach collection="#[message.payload]" doc:name="For Each">
            <set-variable variableName="statistics" value="#[statistics + '\n' + message.payload['Genre'] + ': ' +  message.payload['Counter']]" doc:name="statistics"/>
        </foreach>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="GetDigestCount" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="DigestCount">
            <jdbc-ee:query key="GetDigestCount" value="Select &quot;counter&quot; FROM &quot;statistics&quot; WHERE &quot;statistics_name&quot; = 'digest_sent';"/>
        </jdbc-ee:outbound-endpoint>
        <set-variable variableName="statistics" value="#[statistics +'\n------------------------------\n' + 'Number of digest emails sent: ' + payload[0]['counter']]" doc:name="statistics"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="NonDigestCount" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="NonDigestCount">
            <jdbc-ee:query key="NonDigestCount" value="Select &quot;counter&quot; FROM &quot;statistics&quot; WHERE &quot;statistics_name&quot; = 'non_digest_sent';"/>
        </jdbc-ee:outbound-endpoint>
        <set-variable variableName="statistics" value="#[statistics + '\nNumber of non digest emails sent: ' + payload[0]['counter']]" doc:name="statistics"/>
        <set-payload value="#[statistics]" doc:name="result"/>
    </flow>
    <flow name="EmailHandlerFlow5" doc:name="EmailHandlerFlow5">
        <foreach collection="#[message.payload.getMovie()]" doc:name="For Each">
            <expression-filter expression="#[message.payload.getScore() &gt;= 0]" doc:name="filter movies without scores"/>
            <set-variable variableName="movie" value="#[message.payload]" doc:name="Movie"/>
            <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="CheckMovieExistance" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="check movie existance">
                <jdbc-ee:query key="CheckMovieExistance" value="Select Count(*) From &quot;movie_table_2&quot; where &quot;name&quot; = #[movie.getTitle()];"/>
            </jdbc-ee:outbound-endpoint>
            <choice doc:name="Choice">
                <when expression="#[payload[0]['count'] == 0]">
                    <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="AddMovie" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Add movie to database">
                        <jdbc-ee:query key="AddMovie" value="Insert Into &quot;movie_table_2&quot; Values(#[movie.getTitle()], #[movie.getScore()],#[movie.isAdultContent()], FALSE);"/>
                    </jdbc-ee:outbound-endpoint>
                    <choice doc:name="Choice">
                        <when expression="#[movie.isAdultContent()==false]">
                            <flow-ref name="TwitterFlow1" doc:name="Twitter"/>
                        </when>
                        <otherwise>
                            <flow-ref name="EmailHandlerFlow6" doc:name="Mail"/>
                        </otherwise>
                    </choice>
                    <foreach collection="#[movie.getGenresList().getGenre()]" doc:name="For Each">
                        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="UpdateGenre" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Update genre statistics">
                            <jdbc-ee:query key="UpdateGenre" value="UPDATE &quot;genre_counter&quot; SET &quot;Counter&quot; = &quot;Counter&quot; + 1 WHERE &quot;Genre&quot; = #[message.payload];"/>
                        </jdbc-ee:outbound-endpoint>
                    </foreach>
                </when>
                <otherwise>
                    <logger message="Repeated Movie" level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    <flow name="EmailHandlerFlow6" doc:name="EmailHandlerFlow6">
        <logger level="INFO" doc:name="Nothing" message="  "/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="getNonDigestUsers" queryTimeout="-1" doc:name="Get Non Digest Users" connector-ref="PostgreSQL_JDBC_Connector">
            <jdbc-ee:query key="getNonDigestUsers" value="Select email from &quot;email_table&quot; where is_digest = FALSE;"/>
        </jdbc-ee:outbound-endpoint>
        <foreach collection="#[message.payload]" doc:name="For Each User Email" >
            <set-variable variableName="email" value="#[string:#[#[message.payload.email.replace(&quot;%40&quot;,&quot;@&quot;)]]]" doc:name="Email Address"/>
            <set-payload value="#[movie.getTitle()] was added" doc:name="Email body"/>
            <smtp:outbound-endpoint 
                        host="smtp.gmail.com" 
                        port="587" 
                        user="ucfdesk%40gmail.com" 
                        password="jomami123" 
                        to="#[email]" 
                        from="ucfdesk@gmail.com" 
                        subject="New Movie Added" 
                        responseTimeout="10000" 
                        connector-ref="emailConnector" 
                        doc:name="SMTP"/>
            <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="UpdateStatistics" queryTimeout="-1" connector-ref="PostgreSQL_JDBC_Connector" doc:name="Update statistics">
                <jdbc-ee:query key="UpdateStatistics" value="UPDATE &quot;statistics&quot; SET &quot;counter&quot; = &quot;counter&quot; + 1 WHERE &quot;statistics_name&quot; = 'non_digest_sent';"/>
            </jdbc-ee:outbound-endpoint>
        </foreach>
    </flow>
    
      <flow name="TwitterFlow1" doc:name="TwitterFlow1">
        <twitter:update-status config-ref="Twitter" status="#[string:#[movie.getTitle()]] was added" doc:name="Twitter" accessKey="2221791494-A9wlCIiwa7abWHq7z333Wtxg03tU32o3OpTXVH2" accessSecret="kIrUKW7PmmoXBzJDyIdyTpKyUKrDyHmjOB9ODyQcIDvRJ"/>
    </flow>
    <flow name="EmailHandlerFlow7" doc:name="EmailHandlerFlow7">
        <file:inbound-endpoint path="C:\Users\Miguel\MuleStudio\workspace\is_project_3\movie_xml" transformer-refs="XML_to_Movie" responseTimeout="10000" doc:name="Read data  from file"/>
        <flow-ref name="EmailHandlerFlow5" doc:name="Add Movie"/>
    </flow>
    
    
</mule>